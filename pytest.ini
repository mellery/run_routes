[tool:pytest]
# Pytest configuration for running route optimizer tests
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
addopts = 
    -v
    --tb=short
    --strict-markers
    --disable-warnings
    --cov=route_services
    --cov=ga_chromosome
    --cov=ga_population
    --cov=ga_operators
    --cov=ga_fitness
    --cov=genetic_route_optimizer
    --cov=ga_visualizer
    --cov=ga_parameter_tuning
    --cov=ga_performance
    --cov=route
    --cov=tsp_solver
    --cov=tsp_solver_fast
    --cov=graph_cache
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-report=xml:coverage.xml
    --cov-branch
    --cov-fail-under=85

markers =
    unit: Unit tests (fast, mocked dependencies)
    integration: Integration tests (slower, real dependencies)
    benchmark: Performance benchmark tests
    ga: Genetic algorithm specific tests
    slow: Tests that take longer to run

# Coverage configuration
[coverage:run]
source = .
omit = 
    */venv/*
    */tests/*
    */test_*
    setup.py
    setup_cache.py
    manual_*.py
    quick_*.py
    footway_visualization.py
    osm_tag_analyzer.py
    test_coverage_analysis.py
    *_original.py
    week6_development_test.py
    ga_development_test.py
    */htmlcov/*
    */cache/*
    */srtm_data/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov
title = Running Route Optimizer - Test Coverage Report

[coverage:xml]
output = coverage.xml